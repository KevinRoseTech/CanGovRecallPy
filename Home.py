# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Home.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again. Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from API import RecallsAPI  # Ensure API.py is in the same directory or in the Python path


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(836, 617)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(10, 0, 161, 171))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")

        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")

        self.lineEdit_4 = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        self.lineEdit_4.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_4.setPlaceholderText("Recall ID")
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.verticalLayout.addWidget(self.lineEdit_4)

        self.pushButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton.setText("Search")
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout.addWidget(self.pushButton)

        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(190, 0, 631, 561))
        self.textEdit.setObjectName("textEdit")

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 836, 26))
        self.menubar.setObjectName("menubar")

        self.menuHome = QtWidgets.QMenu(self.menubar)
        self.menuHome.setTitle("Home")
        self.menuSaved_Recalls = QtWidgets.QMenu(self.menubar)
        self.menuSaved_Recalls.setTitle("Saved Recalls")

        self.menubar.addAction(self.menuHome.menuAction())
        self.menubar.addAction(self.menuSaved_Recalls.menuAction())
        MainWindow.setMenuBar(self.menubar)

        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # Connect button click and return pressed to a method
        self.pushButton.clicked.connect(self.perform_search)
        self.lineEdit_4.returnPressed.connect(self.perform_search)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))

    def perform_search(self):
        recall_id = self.lineEdit_4.text().strip()
        if recall_id:
            result = RecallsAPI.get_recall_details(recall_id)
            self.display_details(result)

    def display_details(self, recall_details):
        if recall_details:
            details_text = f"Recall ID: {recall_details.get('recallId')}\n"
            details_text += f"Title: {recall_details.get('title')}\n"
            details_text += f"Category: {', '.join(recall_details.get('category', []))}\n"
            details_text += f"Published Date: {recall_details.get('date_published')}\n"
            details_text += f"URL: {recall_details.get('url')}\n\n"

            for panel in recall_details.get('panels', []):
                details_text += f"{panel['title']}:\n{panel['text']}\n\n"

            self.textEdit.setText(details_text)
        else:
            self.textEdit.setText("No details found.")


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
